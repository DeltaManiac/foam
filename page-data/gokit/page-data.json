{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/gokit","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"gokit\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Gokit\"), mdx(\"p\", null, \"Spring boot like framework for [\", mdx(\"a\", {\n    \"href\": \"golang\",\n    \"title\": \"Golang\",\n    \"parentName\": \"p\"\n  }, \"golang\"), \"]. It has 3 major Components\"), mdx(\"h2\", {\n    \"id\": \"service-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Service Layer\"), mdx(\"ul\", null, mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Innermost layer where business logic resides.\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Modeled as services\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Oblivious to Endpoint/Transport Layers\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Can be used by multiple Transports (grpc/json/http)\")), mdx(\"h2\", {\n    \"id\": \"endpoint-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Endpoint Layer\"), mdx(\"ul\", null, mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Represents a single RPC Method\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Service exposed as an Endpoint\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Endpoint can be exposed by multiple Transports\")), mdx(\"h2\", {\n    \"id\": \"transport-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Transport Layer\"), mdx(\"ul\", null, mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"Exposes various Transports\", mdx(\"ul\", {\n    \"parentName\": \"li\"\n  }, mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"grpc\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"http\")))), mdx(\"h1\", {\n    \"id\": \"building-a-pastebin-clone\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Building a \", mdx(\"inlineCode\", {\n    \"parentName\": \"h1\"\n  }, \"pastebin\"), \" clone\"), mdx(\"h2\", {\n    \"id\": \"define-a-service-blueprint-interface\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Define a service blueprint interface\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"// PbService provides storage capabilities\\ntype PbService interface {\\n    Create(content string, ctx context.Context) (string, error)\\n    Delete(key string, ctx context.Context) (string, error)\\n    Get(key string, ctx context.Context) (string, error)\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"make-a-new-struct-to-define-the-pastebin-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Make a new struct to define the PasteBin Service\"), mdx(\"p\", null, \"This struct is used to group together the functionalities of pastebin service\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"type pbService struct {\\n    memory map[uuid.UUID]string\\n}\\n\\n// NewPbService make a new PbService\\nfunc NewPbService() PbService {\\n    return pbService{\\n        memory: make(map[uuid.UUID]string),\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"implement-the-pbservice-interface-on-the-struct\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Implement the PbService Interface on the struct\"), mdx(\"p\", null, \"In [\", mdx(\"a\", {\n    \"href\": \"golang\",\n    \"title\": \"Golang\",\n    \"parentName\": \"p\"\n  }, \"golang\"), \"] we do not have a key word to define that this structs implements a specific interface like the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"implements\"), \" in Java.\"), mdx(\"p\", null, \"They way we enforce contracts is by implementing all the methods of the contract interface in our case here its the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"PbService\"), \" interface.\"), mdx(\"p\", null, \"Since our \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"NewPbService\"), \" method returns the type of \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"PbService\"), \" the go compiler will ensure that \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"NewPbService\"), \" confirms to the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"PbService\"), \" interface.\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"//Create: Here we store the content and return a uuid\\nfunc (s pbService) Create(ctx context.Context, content string) (string, error) {\\n    id := uuid.New()\\n    s.memory[id] = content\\n    return id.String(), nil\\n}\\n\\n//Delete: Here we use the key to find and delete the content stored\\nfunc (s pbService) Delete(ctx context.Context, key string) (string, error) {\\n    id, err := uuid.Parse(key)\\n    if err != nil {\\n        return \\\"\\\", errors.New(\\\"Invalid Uuid Format\\\")\\n    }\\n    delete(s.memory, id)\\n    return \\\"ok\\\", nil\\n}\\n\\n//Get: Here we use the key to find and return the content stored\\nfunc (s pbService) Get(ctx context.Context, key string) (string, error) {\\n    id, err := uuid.Parse(key)\\n    if err != nil {\\n        return \\\"\\\", errors.New(\\\"Invalid Uuid Format\\\")\\n    }\\n    content, exists := s.memory[id]\\n    if exists {\\n        return content, nil\\n    }\\n    return \\\"\\\", errors.New(\\\"Invalid Uuid\\\")\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"request-and-response\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Request and Response\"), mdx(\"p\", null, \"In Go kit, the primary messaging pattern is RPC.\"), mdx(\"p\", null, \"So, every method in our interface will be modeled as a remote procedure call. For each method, we define request and response structs, capturing all of the input and output parameters respectively.\"), mdx(\"h3\", {\n    \"id\": \"create-request-response\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Create Request Response\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"type createPbRequest struct {\\n    content string `json:\\\"content\\\"`\\n}\\n\\ntype createPbResponse struct {\\n    key string `json:\\\"key\\\"`\\n    Err string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"delete-request-response\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Delete Request Response\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"type deletePbRequest struct {\\n    key string `json:\\\"key\\\"`\\n}\\n\\ntype deletePbResponse struct {\\n    status string `json:\\\"status\\\"`\\n    Err    string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"get-request-response\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Get Request Response\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"type getPbRequest struct {\\n    key string `json:\\\"key\\\"`\\n}\\n\\ntype getPbResponse struct {\\n    content string `json:\\\"content\\\"`\\n    Err     string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"define-endpoints\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Define Endpoints\"), mdx(\"p\", null, \"An endpoint represents a single RPC, which is a single method in our service.\"), mdx(\"h3\", {\n    \"id\": \"create-endpoint\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Create Endpoint\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func createPbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(createPbRequest)\\n        key, err := svc.Create(ctx, req.Content)\\n        if err != nil {\\n            return createPbResponse{key, err.Error()}, nil\\n        }\\n        return createPbResponse{key, \\\"\\\"}, nil\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"delete-endpoint\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Delete Endpoint\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func deletePbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(deletePbRequest)\\n        status, err := svc.Delete(ctx, req.Key)\\n        if err != nil {\\n            return deletePbResponse{status, err.Error()}, nil\\n        }\\n        return deletePbResponse{status, \\\"\\\"}, nil\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"get-endpoint\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Get Endpoint\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func getPbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(getPbRequest)\\n        content, err := svc.Get(ctx, req.Key)\\n        if err != nil {\\n            return getPbResponse{content, err.Error()}, nil\\n        }\\n        return getPbResponse{content, \\\"\\\"}, nil\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"define-transport\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Define Transport\"), mdx(\"p\", null, \"Since this trivial example used JSON over HTTP we would have to decode the JSON to structs that our service can understand\"), mdx(\"h3\", {\n    \"id\": \"create-requester-decoder\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Create Requester Decoder\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func decodeCreatePbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request createPbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"delete-request-decoder\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Delete Request Decoder\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func decodeDeletePbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request deletePbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"get-request-decoder\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Get Request Decoder\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func decodeGetPbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request getPbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"response-encoder\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Response Encoder\"), mdx(\"p\", null, \"This method would accept an \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"interface\"), \" type and convert it JSON, this allows it to accept \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"createPbResponse\"), \",\", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"deletePbResponse\"), \",\", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"getPbResponse\"), \" as an \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"interface{}\"), \" and encode it as json using the annotations in the struct definition.\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {\\n    return json.NewEncoder(w).Encode(response)\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"main\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Main\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"import (\\n    \\\"context\\\"\\n    \\\"encoding/json\\\"\\n    \\\"errors\\\"\\n    \\\"log\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/go-kit/kit/endpoint\\\"\\n    \\\"github.com/google/uuid\\\"\\n\\n    httptransport \\\"github.com/go-kit/kit/transport/http\\\"\\n)\\n\\nfunc main() {\\n    svc := NewPbService()\\n    createPbHandler := httptransport.NewServer(\\n        createPbEndpoint(svc),\\n        decodeCreatePbRequest,\\n        encodeResponse,\\n    )\\n\\n    deletePbHandler := httptransport.NewServer(\\n        deletePbEndpoint(svc),\\n        decodeDeletePbRequest,\\n        encodeResponse,\\n    )\\n    \\n    getPbHandler := httptransport.NewServer(\\n        getPbEndpoint(svc),\\n        decodeGetPbRequest,\\n        encodeResponse,\\n    )\\n    \\n    http.Handle(\\\"/create\\\", createPbHandler)\\n    http.Handle(\\\"/delete\\\", deletePbHandler)\\n    http.Handle(\\\"/get\\\", getPbHandler)\\n    log.Fatal(http.ListenAndServe(\\\":8080\\\", nil))\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"divide-and-conquer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Divide and Conquer\"), mdx(\"p\", null, \"At this point the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"main.go\"), \" has a lot of code so lets move to different files so that we have separation of concerns.\"), mdx(\"h3\", {\n    \"id\": \"servicego\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    \"parentName\": \"h3\"\n  }, \"service.go\")), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"errors\\\"\\n\\n    \\\"github.com/google/uuid\\\"\\n)\\n\\n// PbService provides storage capabilities\\ntype PbService interface {\\n    Create(ctx context.Context, content string) (string, error)\\n    Delete(ctx context.Context, key string) (string, error)\\n    Get(ctx context.Context, key string) (string, error)\\n}\\n\\ntype pbService struct {\\n    memory map[uuid.UUID]string\\n}\\n\\n// NewPbService make a new PbService\\nfunc NewPbService() PbService {\\n    return pbService{\\n        memory: make(map[uuid.UUID]string),\\n    }\\n}\\n\\n//Create: Here we store the content and return a uuid\\nfunc (s pbService) Create(ctx context.Context, content string) (string, error) {\\n    id := uuid.New()\\n    s.memory[id] = content\\n    return id.String(), nil\\n}\\n\\n//Get: Here we use the key to find and return the content stored\\nfunc (s pbService) Get(ctx context.Context, key string) (string, error) {\\n    id, err := uuid.Parse(key)\\n    if err != nil {\\n        return \\\"\\\", errors.New(\\\"Invalid Uuid Format\\\")\\n    }\\n    content, exists := s.memory[id]\\n    if exists {\\n        return content, nil\\n    }\\n    return \\\"\\\", errors.New(\\\"Invalid Uuid\\\")\\n}\\n\\n//Delete: Here we use the key to find and delete the content stored\\nfunc (s pbService) Delete(ctx context.Context, key string) (string, error) {\\n    id, err := uuid.Parse(key)\\n    if err != nil {\\n        return \\\"\\\", errors.New(\\\"Invalid Uuid Format\\\")\\n    }\\n    delete(s.memory, id)\\n    return \\\"ok\\\", nil\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"transportgo\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    \"parentName\": \"h3\"\n  }, \"transport.go\")), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"encoding/json\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/go-kit/kit/endpoint\\\"\\n)\\n\\ntype createPbRequest struct {\\n    Content string `json:\\\"content\\\"`\\n}\\n\\ntype createPbResponse struct {\\n    Key string `json:\\\"key\\\"`\\n    Err string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\\ntype getPbRequest struct {\\n    Key string `json:\\\"key\\\"`\\n}\\n\\ntype getPbResponse struct {\\n    Content string `json:\\\"content\\\"`\\n    Err     string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\\ntype deletePbRequest struct {\\n    Key string `json:\\\"key\\\"`\\n}\\n\\ntype deletePbResponse struct {\\n    Status string `json:\\\"status\\\"`\\n    Err    string `json:\\\"err,omitempty\\\"` // errors don't JSON-marshal, so we use a string\\n}\\n\\nfunc createPbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(createPbRequest)\\n        key, err := svc.Create(ctx, req.Content)\\n        if err != nil {\\n            return createPbResponse{key, err.Error()}, nil\\n        }\\n        return createPbResponse{key, \\\"\\\"}, nil\\n    }\\n}\\n\\nfunc deletePbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(deletePbRequest)\\n        status, err := svc.Delete(ctx, req.Key)\\n        if err != nil {\\n            return deletePbResponse{status, err.Error()}, nil\\n        }\\n        return deletePbResponse{status, \\\"\\\"}, nil\\n    }\\n}\\n\\nfunc getPbEndpoint(svc PbService) endpoint.Endpoint {\\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\\n        req := request.(getPbRequest)\\n        content, err := svc.Get(ctx, req.Key)\\n        if err != nil {\\n            return getPbResponse{content, err.Error()}, nil\\n        }\\n        return getPbResponse{content, \\\"\\\"}, nil\\n    }\\n}\\n\\nfunc decodeCreatePbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request createPbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\\nfunc decodeGetPbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request getPbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\\nfunc decodeDeletePbRequest(_ context.Context, r *http.Request) (interface{}, error) {\\n    var request deletePbRequest\\n    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {\\n        return nil, err\\n    }\\n    return request, nil\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"maingo\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    \"parentName\": \"h3\"\n  }, \"main.go\")), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func main() {\\n    svc := NewPbService()\\n    createPbHandler := httptransport.NewServer(\\n        createPbEndpoint(svc),\\n        decodeCreatePbRequest,\\n        encodeResponse,\\n    )\\n\\n    deletePbHandler := httptransport.NewServer(\\n        deletePbEndpoint(svc),\\n        decodeDeletePbRequest,\\n        encodeResponse,\\n    )\\n    getPbHandler := httptransport.NewServer(\\n        getPbEndpoint(svc),\\n        decodeGetPbRequest,\\n        encodeResponse,\\n    )\\n    http.Handle(\\\"/create\\\", createPbHandler)\\n    http.Handle(\\\"/delete\\\", deletePbHandler)\\n    http.Handle(\\\"/get\\\", getPbHandler)\\n    log.Fatal(http.ListenAndServe(\\\":8080\\\", nil))\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"logging-middleware\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Logging Middleware\"), mdx(\"p\", null, \"All applications need to log information, this can be enabled by adding a logging middleware that we create in a file called \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"logging.go\")), mdx(\"p\", null, \"Middleware in go-kit work on \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"Endpoint\")), mdx(\"p\", null, \"The interface definition is \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"type Middleware func(Endpoint) Endpoint\"), \", which means it is a function that takes in an endpoint and returns an endpoint\"), mdx(\"p\", null, \"We can create the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"loggingMiddleware\"), \" so that it adheres to the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"PbService\"), \" by implementing the \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"Create\"), \" \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"Delete\"), \" \", mdx(\"inlineCode\", {\n    \"parentName\": \"p\"\n  }, \"Get\"), \" methods.\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"type loggingMiddleware struct {\\n    logger log.Logger\\n    next   PbService\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"create\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Create\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func (m loggingMiddleware) Create(ctx context.Context, content string) (output string, err error) {\\n    // This defered function would be invoked just before the retuen statement\\n    defer func(begin time.Time) {\\n        m.logger.Log(\\n            \\\"method\\\", \\\"CreatePb\\\",\\n            \\\"input\\\", content,\\n            \\\"output\\\", output,\\n            \\\"err\\\", err,\\n            \\\"took\\\", time.Since(begin),\\n        )\\n    }(time.Now())\\n    output, err = m.next.Create(ctx, content)\\n    return\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"delete\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Delete\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \" func (m loggingMiddleware) Delete(ctx context.Context, key string) (output string, err error) {\\n    defer func(begin time.Time) {\\n        m.logger.Log(\\n            \\\"method\\\", \\\"DeletePb\\\",\\n            \\\"input\\\", key,\\n            \\\"output\\\", output,\\n            \\\"err\\\", err,\\n            \\\"took\\\", time.Since(begin),\\n        )\\n    }(time.Now())\\n    output, err = m.next.Delete(ctx, key)\\n    return\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"get\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Get\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"func (m loggingMiddleware) Get(ctx context.Context, key string) (output string, err error) {\\n    defer func(begin time.Time) {\\n        m.logger.Log(\\n            \\\"method\\\", \\\"GetPb\\\",\\n            \\\"input\\\", key,\\n            \\\"output\\\", output,\\n            \\\"err\\\", err,\\n            \\\"took\\\", time.Since(begin),\\n        )\\n    }(time.Now())\\n    output, err = m.next.Get(ctx, key)\\n    return\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"wiring-the-middleware\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Wiring the Middleware\"), mdx(\"p\", null, \"In order to wire the middleware in all we have to do is link it up with the service that we have defined\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-go\",\n    \"parentName\": \"pre\"\n  }, \"package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"encoding/json\\\"\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n\\n    \\\"github.com/go-kit/kit/log\\\"\\n\\n    httptransport \\\"github.com/go-kit/kit/transport/http\\\"\\n)\\n\\nfunc main() {\\n    // Use the global logger\\n    logger := log.NewLogfmtLogger(os.Stderr)\\n    var svc PbService\\n    svc = NewPbService()\\n    // Wire the middleware and thats it\\n    svc = loggingMiddleware{logger, svc}\\n\\n    createPbHandler := httptransport.NewServer(\\n        createPbEndpoint(svc),\\n        decodeCreatePbRequest,\\n        encodeResponse,\\n    )\\n\\n    deletePbHandler := httptransport.NewServer(\\n        deletePbEndpoint(svc),\\n        decodeDeletePbRequest,\\n        encodeResponse,\\n    )\\n\\n    getPbHandler := httptransport.NewServer(\\n        getPbEndpoint(svc),\\n        decodeGetPbRequest,\\n        encodeResponse,\\n    )\\n    http.Handle(\\\"/create\\\", createPbHandler)\\n    http.Handle(\\\"/delete\\\", deletePbHandler)\\n    http.Handle(\\\"/get\\\", getPbHandler)\\n    logger.Log(\\\"msg\\\", \\\"HTTP\\\", \\\"addr\\\", \\\":8080\\\")\\n    logger.Log(\\\"err\\\", http.ListenAndServe(\\\":8080\\\", nil))\\n}\\n\\nfunc encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {\\n    return json.NewEncoder(w).Encode(response)\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"pastebin\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"PasteBin\"), mdx(\"h3\", {\n    \"id\": \"client\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Client\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-sh\",\n    \"parentName\": \"pre\"\n  }, \"\\n$ curl localhost:8080/create -XPOST -d '{\\\"content\\\":\\\"THIS IS SPARTA\\\"}'\\n\\n{\\\"key\\\":\\\"c449250a-d74c-4d23-acbb-6785b0bd822a\\\"} \\n\\n$ curl localhost:8080/get -XPOST -d '{\\\"key\\\":\\\"c449250a-d74c-4d23-acbb-6785b0bd822a\\\"}'\\n\\n{\\\"content\\\":\\\"THIS IS SPARTA\\\"}\\n\\n$ curl localhost:8I00/delete -XPOST -d '{\\\"key\\\":\\\"c449250a-d74c-4d23-acbb-6785b0bd822a\\\"}'\\n\\n{\\\"status\\\":\\\"ok\\\"}\\n\\n$ curl localhost:8080/get -XPOST -d '{\\\"key\\\":\\\"c449250a-d74c-4d23-acbb-6785b0bd822a\\\"}'\\n\\n{\\\"content\\\":\\\"\\\",\\\"err\\\":\\\"Invalid Uuid\\\"}\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"server\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Server\"), mdx(\"pre\", null, mdx(\"code\", {\n    \"className\": \"language-sh\",\n    \"parentName\": \"pre\"\n  }, \"$ ./pastebin-II \\n\\nmsg=HTTP addr=:8080\\n\\nmethod=CreatePb input=\\\"THIS IS SPARTA\\\" output=c449250a-d74c-4d23-acbb-6785b0bd822a err=null took=67.92\\xB5s\\n\\nmethod=GetPb input=c449250a-d74c-4d23-acbb-6785b0bd822a output=\\\"THIS IS SPARTA\\\" err=null took=1.675\\xB5s\\n\\nmethod=DeletePb input=c449250a-d74c-4d23-acbb-6785b0bd822a output=ok err=null took=1.45\\xB5s\\n\\nmethod=GetPb input=c449250a-d74c-4d23-acbb-6785b0bd822a output= err=\\\"Invalid Uuid\\\" took=803ns\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"golang\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Golang\"), mdx(\"h2\", {\n    \"id\": \"web-dev\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Web Dev\"), mdx(\"p\", null, \"[\", mdx(\"a\", {\n    \"href\": \"gokit\",\n    \"title\": \"Gokit\",\n    \"parentName\": \"p\"\n  }, \"gokit\"), \"]\"), mdx(\"h2\", {\n    \"id\": \"kafka\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Kafka\"), mdx(\"p\", null, \"Kafka [\", mdx(\"a\", {\n    \"href\": \"producer\",\n    \"title\": \"Producer\",\n    \"parentName\": \"p\"\n  }, \"producer\"), \"]\"), mdx(\"p\", null, \"Kafka [\", mdx(\"a\", {\n    \"href\": \"consumer\",\n    \"title\": \"Consumer\",\n    \"parentName\": \"p\"\n  }, \"consumer\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"c67dd331-477d-55b4-b7e1-c14bf357a00a","fields":{"slug":"/golang","title":"Golang"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"golang\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Golang\"), mdx(\"h2\", {\n    \"id\": \"web-dev\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Web Dev\"), mdx(\"p\", null, \"[\", mdx(\"a\", {\n    \"href\": \"gokit\",\n    \"title\": \"Gokit\",\n    \"parentName\": \"p\"\n  }, \"gokit\"), \"]\"), mdx(\"h2\", {\n    \"id\": \"kafka\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Kafka\"), mdx(\"p\", null, \"Kafka [\", mdx(\"a\", {\n    \"href\": \"producer\",\n    \"title\": \"Producer\",\n    \"parentName\": \"p\"\n  }, \"producer\"), \"]\"), mdx(\"p\", null, \"Kafka [\", mdx(\"a\", {\n    \"href\": \"consumer\",\n    \"title\": \"Consumer\",\n    \"parentName\": \"p\"\n  }, \"consumer\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"c67dd331-477d-55b4-b7e1-c14bf357a00a","fields":{"slug":"/golang","title":"Golang"}}}]},"fields":{"slug":"/gokit","title":"Gokit"}}},"pageContext":{"id":"7afde6b3-d4de-54bb-8c90-665201f30ec2"}},"staticQueryHashes":["2098632890","426988268"]}